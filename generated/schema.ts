// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TwitterPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("describe", Value.fromString(""));
    this.set("cover", Value.fromString(""));
    this.set("status", Value.fromString(""));
    this.set("end_time", Value.fromBigInt(BigInt.zero()));
    this.set("create_time", Value.fromBigInt(BigInt.zero()));
    this.set("update_time", Value.fromBigInt(BigInt.zero()));
    this.set("twitter_link", Value.fromString(""));
    this.set("creator_id", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TwitterPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TwitterPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TwitterPool", id.toString(), this);
    }
  }

  static load(id: string): TwitterPool | null {
    return changetype<TwitterPool | null>(store.get("TwitterPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get describe(): string {
    let value = this.get("describe");
    return value!.toString();
  }

  set describe(value: string) {
    this.set("describe", Value.fromString(value));
  }

  get cover(): string {
    let value = this.get("cover");
    return value!.toString();
  }

  set cover(value: string) {
    this.set("cover", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value!.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get end_time(): BigInt {
    let value = this.get("end_time");
    return value!.toBigInt();
  }

  set end_time(value: BigInt) {
    this.set("end_time", Value.fromBigInt(value));
  }

  get create_time(): BigInt {
    let value = this.get("create_time");
    return value!.toBigInt();
  }

  set create_time(value: BigInt) {
    this.set("create_time", Value.fromBigInt(value));
  }

  get update_time(): BigInt {
    let value = this.get("update_time");
    return value!.toBigInt();
  }

  set update_time(value: BigInt) {
    this.set("update_time", Value.fromBigInt(value));
  }

  get white_list(): Array<string> | null {
    let value = this.get("white_list");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set white_list(value: Array<string> | null) {
    if (!value) {
      this.unset("white_list");
    } else {
      this.set("white_list", Value.fromStringArray(<Array<string>>value));
    }
  }

  get requirement(): string | null {
    let value = this.get("requirement");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set requirement(value: string | null) {
    if (!value) {
      this.unset("requirement");
    } else {
      this.set("requirement", Value.fromString(<string>value));
    }
  }

  get twitter_link(): string {
    let value = this.get("twitter_link");
    return value!.toString();
  }

  set twitter_link(value: string) {
    this.set("twitter_link", Value.fromString(value));
  }

  get winner_account(): Array<string> | null {
    let value = this.get("winner_account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set winner_account(value: Array<string> | null) {
    if (!value) {
      this.unset("winner_account");
    } else {
      this.set("winner_account", Value.fromStringArray(<Array<string>>value));
    }
  }

  get winner_record(): Array<string> | null {
    let value = this.get("winner_record");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set winner_record(value: Array<string> | null) {
    if (!value) {
      this.unset("winner_record");
    } else {
      this.set("winner_record", Value.fromStringArray(<Array<string>>value));
    }
  }

  get creator_id(): string {
    let value = this.get("creator_id");
    return value!.toString();
  }

  set creator_id(value: string) {
    this.set("creator_id", Value.fromString(value));
  }

  get ft_prize(): Array<string> | null {
    let value = this.get("ft_prize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ft_prize(value: Array<string> | null) {
    if (!value) {
      this.unset("ft_prize");
    } else {
      this.set("ft_prize", Value.fromStringArray(<Array<string>>value));
    }
  }

  get nft_prize(): Array<string> | null {
    let value = this.get("nft_prize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nft_prize(value: Array<string> | null) {
    if (!value) {
      this.unset("nft_prize");
    } else {
      this.set("nft_prize", Value.fromStringArray(<Array<string>>value));
    }
  }

  get join_account(): Array<string> | null {
    let value = this.get("join_account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set join_account(value: Array<string> | null) {
    if (!value) {
      this.unset("join_account");
    } else {
      this.set("join_account", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get joined_prize_pool(): Array<string> | null {
    let value = this.get("joined_prize_pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set joined_prize_pool(value: Array<string> | null) {
    if (!value) {
      this.unset("joined_prize_pool");
    } else {
      this.set(
        "joined_prize_pool",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get whitelist_pool(): Array<string> | null {
    let value = this.get("whitelist_pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set whitelist_pool(value: Array<string> | null) {
    if (!value) {
      this.unset("whitelist_pool");
    } else {
      this.set("whitelist_pool", Value.fromStringArray(<Array<string>>value));
    }
  }

  get created_pool(): Array<string> | null {
    let value = this.get("created_pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set created_pool(value: Array<string> | null) {
    if (!value) {
      this.unset("created_pool");
    } else {
      this.set("created_pool", Value.fromStringArray(<Array<string>>value));
    }
  }

  get winned_pool(): Array<string> | null {
    let value = this.get("winned_pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set winned_pool(value: Array<string> | null) {
    if (!value) {
      this.unset("winned_pool");
    } else {
      this.set("winned_pool", Value.fromStringArray(<Array<string>>value));
    }
  }

  get winned_prize(): Array<string> | null {
    let value = this.get("winned_prize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set winned_prize(value: Array<string> | null) {
    if (!value) {
      this.unset("winned_prize");
    } else {
      this.set("winned_prize", Value.fromStringArray(<Array<string>>value));
    }
  }

  get sender_activity(): Array<string> | null {
    let value = this.get("sender_activity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sender_activity(value: Array<string> | null) {
    if (!value) {
      this.unset("sender_activity");
    } else {
      this.set("sender_activity", Value.fromStringArray(<Array<string>>value));
    }
  }

  get recevier_activity(): Array<string> | null {
    let value = this.get("recevier_activity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set recevier_activity(value: Array<string> | null) {
    if (!value) {
      this.unset("recevier_activity");
    } else {
      this.set(
        "recevier_activity",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class FT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("token_id", Value.fromString(""));
    this.set("amount", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FT", id.toString(), this);
    }
  }

  static load(id: string): FT | null {
    return changetype<FT | null>(store.get("FT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token_id(): string {
    let value = this.get("token_id");
    return value!.toString();
  }

  set token_id(value: string) {
    this.set("token_id", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contract_id", Value.fromString(""));
    this.set("nft_id", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract_id(): string {
    let value = this.get("contract_id");
    return value!.toString();
  }

  set contract_id(value: string) {
    this.set("contract_id", Value.fromString(value));
  }

  get nft_id(): string {
    let value = this.get("nft_id");
    return value!.toString();
  }

  set nft_id(value: string) {
    this.set("nft_id", Value.fromString(value));
  }

  get prize_pools(): Array<string> | null {
    let value = this.get("prize_pools");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set prize_pools(value: Array<string> | null) {
    if (!value) {
      this.unset("prize_pools");
    } else {
      this.set("prize_pools", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Record extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("receiver", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("transaction_hash", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Record entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Record entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Record", id.toString(), this);
    }
  }

  static load(id: string): Record | null {
    return changetype<Record | null>(store.get("Record", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get FT_Prize(): string | null {
    let value = this.get("FT_Prize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set FT_Prize(value: string | null) {
    if (!value) {
      this.unset("FT_Prize");
    } else {
      this.set("FT_Prize", Value.fromString(<string>value));
    }
  }

  get NFT_Prize(): string | null {
    let value = this.get("NFT_Prize");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set NFT_Prize(value: string | null) {
    if (!value) {
      this.unset("NFT_Prize");
    } else {
      this.set("NFT_Prize", Value.fromString(<string>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get transaction_hash(): string {
    let value = this.get("transaction_hash");
    return value!.toString();
  }

  set transaction_hash(value: string) {
    this.set("transaction_hash", Value.fromString(value));
  }
}

export class Activity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sender", Value.fromString(""));
    this.set("contract_id", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
    this.set("method", Value.fromString(""));
    this.set("transaction_hash", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("msg", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Activity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Activity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Activity", id.toString(), this);
    }
  }

  static load(id: string): Activity | null {
    return changetype<Activity | null>(store.get("Activity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get contract_id(): string {
    let value = this.get("contract_id");
    return value!.toString();
  }

  set contract_id(value: string) {
    this.set("contract_id", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get method(): string {
    let value = this.get("method");
    return value!.toString();
  }

  set method(value: string) {
    this.set("method", Value.fromString(value));
  }

  get transaction_hash(): string {
    let value = this.get("transaction_hash");
    return value!.toString();
  }

  set transaction_hash(value: string) {
    this.set("transaction_hash", Value.fromString(value));
  }

  get ft(): string | null {
    let value = this.get("ft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ft(value: string | null) {
    if (!value) {
      this.unset("ft");
    } else {
      this.set("ft", Value.fromString(<string>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get near(): BigInt | null {
    let value = this.get("near");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set near(value: BigInt | null) {
    if (!value) {
      this.unset("near");
    } else {
      this.set("near", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get msg(): string {
    let value = this.get("msg");
    return value!.toString();
  }

  set msg(value: string) {
    this.set("msg", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}
